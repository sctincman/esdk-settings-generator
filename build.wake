tuple ESDKSettingsGeneratorOptions =
  global TopDTSFile:    Path
  global OtherDTSFiles: List Path
  global Type:          String
  global OutputFile:    String

# Instead of copying the script sources into build/{here}, we'll just
# execute directly out of the package directory, since nothing gets
# modified during execution.
#
# The virtualenv does get placed in build/{here} by
# addPythonRequirementsEnv, along with a copy of requirements.txt
def generatorDir = here

#######################################################################
# makeESDKSettingsGeneratorOptions takes the following parameters:
#   - topDTSFile: The top-level Devicetree source file
#   - otherDTSFiles: any other Devicetree source files included in the
#                    hierarchy of Devicetree source files
#   - type: One of {rtl, arty, qemu, hifive, spike, vc707}
#   - outputFile: A string representing the path of the output file to
#                 produce
#######################################################################
global def makeESDKSettingsGeneratorOptions topDTSFile otherDTSFiles type outputFile =
  ESDKSettingsGeneratorOptions topDTSFile otherDTSFiles type outputFile

global def runESDKSettingsGenerator options =
  def topDTSFile = options.getESDKSettingsGeneratorOptionsTopDTSFile
  def otherDTSFiles = options.getESDKSettingsGeneratorOptionsOtherDTSFiles

  def inputs =
    def generatorSources = sources here `.*\.py`
    def dtsSources = topDTSFile, otherDTSFiles
    generatorSources ++ dtsSources

  def outputs = options.getESDKSettingsGeneratorOptionsOutputFile, Nil

  def args =
    def output =
      "-o", options.getESDKSettingsGeneratorOptionsOutputFile,
      Nil

    def type =
      "-t", options.getESDKSettingsGeneratorOptionsType,
      Nil

    def dts =
      "-d", topDTSFile.getPathName,
      Nil

    output ++ type ++ dts

  makePlan (pythonCommand "{generatorDir}/generate_settings.py" args) inputs
  | addPlanRelativePath "PYTHONPATH" generatorDir
  | addPythonRequirementsEnv generatorDir
  | setPlanFnOutputs (\_ outputs)
  | runJob

# This allows the python virtualenv to be created prior to running a build
# with `wake preinstall Unit`.
publish preinstall = (pythonRequirementsInstaller generatorDir), Nil

global def esdkSettingsGeneratorBuildTarget =
  baseBuildTargetPlan "esdk-settings-generator"
  | dependsOnFn "topDTSFile" (_)
  | dependsOnFn "otherDTSFiles" jNestedArrayMap
  | dependsOn "type" jString
  | dependsOn "outputFile" jString
  | definedAs (
    \topDTSFile
    \otherDTSFiles
    \type
    \outputFile
    \_ (
      def attributes =
        makeESDKSettingsGeneratorOptions topDTSFile otherDTSFiles type outputFile
        | runESDKSettingsGenerator
        | getJobOutput

      def rlines = read attributes | rmap `\n`.tokenize
      match rlines
        Pass lines =
          def getAttribute attribute =
            def regex = regExpCat (`^`, attribute, ` = (.*)$`, Nil)
            lines
            | map regex.extract
            | flatten
            | head
          match `RISCV_ABI`.getAttribute `RISCV_ARCH`.getAttribute `RISCV_CMODEL`.getAttribute
            (Some mabi) (Some march) (Some cmodel) = Pass (
              "output" → bPath attributes,
              "abi" → bJValue (JString mabi),
              "arch" → bJValue (JString mabi),
              "CMODEL" → bJValue (JString cmodel),
              Nil
            )
            _ _ _ = Fail "Generated make attributes file not formatted correctly: {attributes.getPathName}".makeError
        Fail fail = Fail fail
    )
  )
  | exports bObject
  | makeBuildTarget

publish buildTargets = esdkSettingsGeneratorBuildTarget, Nil
